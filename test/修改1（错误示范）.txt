
/***********************************/
/* COMP 1921M Programming Project  */
/* 2021-22 Spring Semester         */
/*                                 */
/* Hamish Carr                     */
/***********************************/

/***********************************/
/* A first iteration to take a pgm */
/* file in binary and convert to   */
/* ASCII or vice versa             */
/***********************************/

/***********************************/
/* Main Routine                    */
/***********************************/

/* library for I/O routines        */
#include <stdio.h>

/* library for memory routines     */
#include <stdlib.h>

#define EXIT_NO_ERRORS 0
#define EXIT_WRONG_ARG_COUNT 1
#define EXIT_BAD_INPUT_FILE 2
#define EXIT_BAD_OUTPUT_FILE 3

#define MAGIC_NUMBER_RAW_PGM 0x3550
#define MAGIC_NUMBER_ASCII_PGM 0x3250
#define MIN_IMAGE_DIMENSION 1
#define MAX_IMAGE_DIMENSION 65536
#define MAX_COMMENT_LINE_LENGTH 128

/***********************************/
/* main routine                    */
/*                                 */
/* CLI parameters:                 */
/* argv[0]: executable name        */
/* argv[1]: input file name        */
/* argv[2]: output file name       */
/* returns 0 on success            */
/* non-zero error code on fail     */
/***********************************/
/* the magic number		         */
	/* stored as two bytes to avoid	         */
	/* problems with endianness	        存储为两个字节以避免端序问题 */
	/* Raw:    0x5035 or P5	50对应P  35对应字符5         */
	/* ASCII:  0x5032 or P2	50对应P  32对应字符2  	         */
	unsigned char magic_number[2] = {'0','0'};
	unsigned short *magic_Number = (unsigned short *) magic_number;
// yxy:文件指针值传递方式错误，无法将值带回到main中
int openfile(FILE *inputFile,char * filename)
{
    inputFile = fopen(filename, "r");

	/* if it fails, return error code        */
	if (inputFile == NULL)
		return EXIT_BAD_INPUT_FILE;

	/* read in the magic number            读取 magic number     */
	magic_number[0] = getc(inputFile);
	magic_number[1] = getc(inputFile);
	printf("hello");
    printf("%s",magic_number);
	/* sanity check on the magic number    对magic number  进行检查   */
	if (*magic_Number != MAGIC_NUMBER_ASCII_PGM)
		{ /* failed magic number check   */
		/* be tidy: close the file       */
		fclose(inputFile);

		/* print an error message */
		printf("Error: Failed to read pgm image from file %s\n", filename);

		/* and return                    */
		return (int)EXIT_BAD_INPUT_FILE;

		} /* failed magic number check   */
}
/* main() */
int main(int argc, char **argv)
	{ FILE *inputFile;

	/* check for correct number of arguments 检查参数个数 */
	if (argc != 3)
		{ /* wrong arg count */
		/* print an error message        */
		printf("Usage: %s input_file output_file\n", argv[0]);
		/* and return an error code      */
		return EXIT_WRONG_ARG_COUNT;
		} /* wrong arg count */

	/* variables for storing the image       */
    	/* this is NOT good modularisation       */
    	/* and you will eventually replace it    */
    	/* for now, leave it here                */


	/* we will store ONE comment	         */
	char *commentLine = NULL;

	/* the logical width & height	         */
	/* note: cannot be negative	         */
	unsigned int width = 0, height = 0;

	/* maximum gray value (assumed)	最大灰度值 （假设的）     */
	/* make it an integer for ease	         */
	unsigned int maxGray = 255;

	/* pointer to raw image data	   指向原始图像数据的指针      */
	unsigned char *imageData = NULL;
    printf("hello");
	/* now start reading in the data         */
	/* try to open the file for text I/O   尝试打开输入输出文件  */
	/* in ASCII mode b/c the header is text  在ASCII模式中 b/c   文件头为文本 */
	/* yxy: 调用函数打开文件*/
    if(openfile(inputFile,argv[1])==2) return EXIT_BAD_INPUT_FILE ;
    printf("OK");
	/* scan whitespace if present            */
	
	
	
	//yxy:         封装了文件open函数 从这句开始出现Segmentation fault
	int scanCount = fscanf(inputFile, " ");
/* check for a comment line       检查是否为注释行    commentLine为指针    */



	} /* main() */
